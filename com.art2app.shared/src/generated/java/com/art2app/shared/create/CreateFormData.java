package com.art2app.shared.create;

import javax.annotation.Generated;

import org.eclipse.scout.rt.platform.resource.BinaryResource;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications
 * recommended.
 */
@Generated(value = "com.art2app.client.create.CreateForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class CreateFormData extends AbstractFormData {

	private static final long serialVersionUID = 1L;

	/**
	 * access method for property Appid.
	 */
	public int getAppid() {
		return getAppidProperty().getValue() == null ? 0 : getAppidProperty().getValue();
	}

	/**
	 * access method for property Appid.
	 */
	public void setAppid(int appid) {
		getAppidProperty().setValue(appid);
	}

	public AppidProperty getAppidProperty() {
		return getPropertyByClass(AppidProperty.class);
	}

	public Icon getIcon() {
		return getFieldByClass(Icon.class);
	}

	public IconChecked getIconChecked() {
		return getFieldByClass(IconChecked.class);
	}

	/**
	 * access method for property Icon_filename.
	 */
	public String getIcon_filename() {
		return getIcon_filenameProperty().getValue();
	}

	/**
	 * access method for property Icon_filename.
	 */
	public void setIcon_filename(String icon_filename) {
		getIcon_filenameProperty().setValue(icon_filename);
	}

	public Icon_filenameProperty getIcon_filenameProperty() {
		return getPropertyByClass(Icon_filenameProperty.class);
	}

	/**
	 * access method for property Icons.
	 */
	public byte[] getIcons() {
		return getIconsProperty().getValue();
	}

	/**
	 * access method for property Icons.
	 */
	public void setIcons(byte[] icons) {
		getIconsProperty().setValue(icons);
	}

	public IconsProperty getIconsProperty() {
		return getPropertyByClass(IconsProperty.class);
	}

	public Name getName() {
		return getFieldByClass(Name.class);
	}

	/**
	 * access method for property Name.
	 */
	public void setName(String name) {
		getNameProperty().setValue(name);
	}

	public NameChecked getNameChecked() {
		return getFieldByClass(NameChecked.class);
	}

	public NameProperty getNameProperty() {
		return getPropertyByClass(NameProperty.class);
	}

	/**
	 * access method for property Setting.
	 */
	public int getSetting() {
		return getSettingProperty().getValue() == null ? 0 : getSettingProperty().getValue();
	}

	/**
	 * access method for property Setting.
	 */
	public void setSetting(int setting) {
		getSettingProperty().setValue(setting);
	}

	public SettingProperty getSettingProperty() {
		return getPropertyByClass(SettingProperty.class);
	}

	/**
	 * access method for property Splash_filename.
	 */
	public String getSplash_filename() {
		return getSplash_filenameProperty().getValue();
	}

	/**
	 * access method for property Splash_filename.
	 */
	public void setSplash_filename(String splash_filename) {
		getSplash_filenameProperty().setValue(splash_filename);
	}

	public Splash_filenameProperty getSplash_filenameProperty() {
		return getPropertyByClass(Splash_filenameProperty.class);
	}

	/**
	 * access method for property Splashscreen.
	 */
	public byte[] getSplashscreen() {
		return getSplashscreenProperty().getValue();
	}

	/**
	 * access method for property Splashscreen.
	 */
	public void setSplashscreen(byte[] splashscreen) {
		getSplashscreenProperty().setValue(splashscreen);
	}

	public SplashscreenProperty getSplashscreenProperty() {
		return getPropertyByClass(SplashscreenProperty.class);
	}

	/**
	 * access method for property User.
	 */
	public String getUser() {
		return getUserProperty().getValue();
	}

	/**
	 * access method for property User.
	 */
	public void setUser(String user) {
		getUserProperty().setValue(user);
	}

	public UserProperty getUserProperty() {
		return getPropertyByClass(UserProperty.class);
	}

	/**
	 * access method for property Webtomobile_url.
	 */
	public String getWebtomobile_url() {
		return getWebtomobile_urlProperty().getValue();
	}

	/**
	 * access method for property Webtomobile_url.
	 */
	public void setWebtomobile_url(String webtomobile_url) {
		getWebtomobile_urlProperty().setValue(webtomobile_url);
	}

	public Webtomobile_urlProperty getWebtomobile_urlProperty() {
		return getPropertyByClass(Webtomobile_urlProperty.class);
	}

	public static class AppidProperty extends AbstractPropertyData<Integer> {

		private static final long serialVersionUID = 1L;
	}

	public static class Icon extends AbstractValueFieldData<BinaryResource> {

		private static final long serialVersionUID = 1L;
	}

	public static class IconChecked extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class Icon_filenameProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class IconsProperty extends AbstractPropertyData<byte[]> {

		private static final long serialVersionUID = 1L;
	}

	/**
	 * TODO [everyone] Duplicate names 'Name'. Rename property or form field.
	 */
	public static class Name extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class NameChecked extends AbstractValueFieldData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class NameProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class SettingProperty extends AbstractPropertyData<Integer> {

		private static final long serialVersionUID = 1L;
	}

	public static class Splash_filenameProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class SplashscreenProperty extends AbstractPropertyData<byte[]> {

		private static final long serialVersionUID = 1L;
	}

	public static class UserProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}

	public static class Webtomobile_urlProperty extends AbstractPropertyData<String> {

		private static final long serialVersionUID = 1L;
	}
}
